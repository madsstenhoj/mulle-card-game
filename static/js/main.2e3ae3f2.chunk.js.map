{"version":3,"sources":["logic/store.ts","components/PlayingCard/index.tsx","components/PileOfCards/index.tsx","components/PlayArea/index.tsx","components/Player/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerPiles","EventType","PileType","PlayingCard","inject","observer","props","backsideUp","cardId","store","useDrag","item","name","type","ItemTypes","CARD","end","monitor","dropResult","getDropResult","emitCardMove","Number","collect","isDragging","drag","card","getPlayingCard","value","ref","style","width","opacity","cursor","margin","Card","onClick","selectable","selectCard","height","src","alt","position","padding","fontWeight","border","borderRadius","color","top","left","textAlign","fontSize","textShadow","PileOfCards","upperCardId","cardIds","length","undefined","displayTooltip","piled","Segment","Group","minWidth","Button","size","putCard","icon","title","map","index","Popup","flowing","trigger","content","takePileHome","inverted","itemsPerRow","sort","aCardId","bCardId","a","b","diff","number","pointDiff","points","PlayArea","useDrop","accept","drop","isOver","getItem","getCardsForPile","PlayMaker","gameId","playerId","socket","WebSocket","init","cards","createDeck","shuffleCards","addPlayers","cardPiles","push","id","pileType","MAIN","i","PLAY_AREA","addEventListener","event","console","log","updateGameState","data","amount","values","colors","deck","getPointsForCard","getNumberForCard","temporaryValue","randomIndex","currentIndex","Math","floor","random","playerIndex","this","players","getPlayerName","pointsInTotal","HAND","PLAYER","SVUPPER","POINTS","MULLE","currentCards","player","cardIdToBeSent","pop","cardPile","filter","toPile","CARD_MOVE","move","send","JSON","stringify","message","find","newPilePosition","pile","indexOf","fromPile","gameStateChange","parse","moveCardFromOnePileToAnother","selectedCardId","e","observable","action","Player","Label","loosePoints","Grid","columns","Column","pointCardIds","mulleCardIds","svupperCardIds","concat","svuppereCardIds","Component","computed","App","changeDealAmount","input","dealAmount","getPlayerId","urlParts","window","location","href","split","param","DndProvider","backend","Backend","Header","as","marginBottom","backgroundColor","dealCardsToAllPlayers","Input","onChange","divided","Row","Boolean","hostname","match","PlayMakerStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"okEAgBYA,EAOAC,EAIAC,E,0PCbNC,EAAcC,YAAO,QAAPA,CAClBC,aAAS,SAACC,GAAmB,IACnBC,EAA8BD,EAA9BC,WAAYC,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,MADF,EAGKC,YAAQ,CACrCC,KAAM,CAAEC,KAAMJ,EAAQK,KAAMC,EAAUC,MACtCC,IAAK,SAACL,EAAoCM,GACxC,IAAMC,EAAaD,EAAQE,gBACvBR,GAAQO,GACVZ,EAAMG,MAAOW,aAAaF,EAAWN,KAAMS,OAAOV,EAAKC,QAG3DU,QAAS,SAACL,GAAD,MAAc,CACrBM,aAAcN,EAAQM,iBAZA,mBAGjBA,EAHiB,KAGjBA,WAAcC,EAHG,KAgBpBC,EAAOhB,EAAOiB,eAAelB,GAEC,UAAfiB,EAAKE,OAAyBF,EAAKE,MAExD,OACE,yBACEC,IAAKJ,EACLK,MAAO,CACLC,MAAO,GACPC,QAASR,EAAa,GAAM,EAC5BS,OAAQ,OACRC,OAAQ,WAGV,kBAACC,EAAA,EAAD,CACEC,QAAS,WACgB,IAAD,EAAlB7B,EAAM8B,aACR,UAAA9B,EAAMG,aAAN,SAAa4B,WAAW/B,EAAME,UAGlCqB,MAAO,CAAEC,MAAO,GAAIQ,OAAQ,KAE3B/B,EACC,yBACEgC,IAAK,mCACLC,IAAI,GACJX,MAAO,CAAEC,MAAO,UAGlB,yBACED,MAAO,CACLY,SAAU,WACVH,OAAQ,GACRR,MAAO,GACPY,QAAS,EACTC,WAAY,OACZC,OAAQ,iBACRC,aAAc,IAGA,UAAfpB,EAAKE,MACJ,oCACE,yBACEY,IAAG,+BAA0Bd,EAAKqB,OAClCN,IAAI,GACJX,MAAO,CAAEC,MAAO,GAAIQ,OAAQ,OAIhC,oCACE,yBACET,MAAO,CACLY,SAAU,WACVM,IAAK,EACLC,KAAM,EACNlB,MAAO,KAGT,0BACED,MAAO,CACLY,SAAU,WACVM,KAAM,EACNC,KAAM,EACNC,UAAW,SACXC,SAAU,GACVJ,MACiB,cAAfrB,EAAKqB,OACU,gBAAfrB,EAAKqB,MACD,MACA,UAGPrB,EAAKE,OAER,yBACEY,IAAG,+BAA0Bd,EAAKqB,OAClCN,IAAI,GACJX,MAAO,CACLY,SAAU,WACVO,KAAM,GACNlB,MAAO,OAIb,yBACED,MAAO,CACLY,SAAU,WACVM,IAAK,GACLC,KAAM,IAGR,yBACET,IAAG,+BAA0Bd,EAAKqB,OAClCN,IAAI,GACJX,MAAO,CACLC,MAAO,OACPiB,KAAM,EACNC,MAAO,EACPP,SAAU,cAGd,yBACEZ,MAAO,CACLoB,UAAW,SACXC,SAAU,GACVT,SAAU,WACVO,KAAM,GACND,IAAK,GACLD,MAAO,UAGT,0BACEjB,MAAO,CACLsB,WAAY,sBAGb1B,EAAKE,iBAcftB,cAASF,G,kBCbTiD,EArIKhD,YAAO,QAAPA,CAClBC,aAAS,SAACC,GACR,IAAM+C,EAAc/C,EAAMgD,QAAQC,OAC9BjD,EAAMgD,QAAQhD,EAAMgD,QAAQC,OAAS,QACrCC,EAOEC,GAJJnD,EAAMgD,QAAQC,OAAS,GAAKjD,EAAMoD,QAAUpD,EAAMC,YAC9CD,EAAMgD,QAAQhD,EAAMgD,QAAQC,OAAS,GAIzCjD,EAAMoD,QAAUpD,EAAMC,YAAcD,EAAMgD,QAAQC,OAAS,GAoB7D,OACE,kBAACI,EAAA,EAAQC,MAAT,CAAe/B,MAAO,CAAEgC,SAAU,KAChC,kBAACF,EAAA,EAAD,CAASV,UAAW,UACjB3C,EAAMoD,OACL,kBAACI,EAAA,EAAD,CACEC,KAAM,QACN5B,QAAS,kBAAM7B,EAAMG,MAAOuD,QAAQ1D,EAAMmC,WAC1CwB,KAAM,gCAGT3D,EAAM4D,OAAS,8BAAO5D,EAAM4D,aAEdV,IAAhBH,GACC,oCACG/C,EAAMoD,MACL,oCACE,kBAACC,EAAA,EAAD,CACED,OAAO,EACPT,UAAW,SACXpB,MAAO,CACLS,OAAQhC,EAAMC,WACV,IACA,IAA6B,GAAvBD,EAAMgD,QAAQC,SAGzBjD,EAAMC,YAAcD,EAAMgD,QAAQC,QACjC,kBAAC,EAAD,CACE/C,OAAQF,EAAMgD,QAAQ,GACtB/C,YAAY,EACZ6B,YAAY,KAGd9B,EAAMC,YACND,EAAMgD,QAAQa,KAAI,SAAC3D,EAAQ4D,GAAT,OAChB,yBACEvC,MAAO,CACLY,SAAU,WACVM,IAAa,GAARqB,IAGP,kBAAC,EAAD,CACE5D,OAAQA,EACRD,YAAY,EACZ6B,YAAY,QAIpB,kBAACiC,EAAA,EAAD,CACEC,SAAS,EACTC,QAAS,kBAACT,EAAA,EAAD,CAAQU,QAASlE,EAAMgD,QAAQC,SACxCiB,QACE,8BACGlE,EAAMgD,QAAQa,KAAI,SAAC3D,GAAD,OACjB,kBAAC,EAAD,CACE4B,YAAY,EACZ7B,WAAYD,EAAMC,WAClBC,OAAQA,WAOpB,kBAACmD,EAAA,EAAD,CAASV,UAAW,UAClB,kBAACa,EAAA,EAAOF,MAAR,KACGH,GACC,kBAACY,EAAA,EAAD,CACEE,QACE,kBAACT,EAAA,EAAD,CACEC,KAAM,QACNE,KAAM,QACN9B,QAAS,kBACP7B,EAAMG,MAAOgE,aAAanE,EAAMmC,aAItC+B,QAAS,kBACTE,UAAU,OAOpB,kBAACxC,EAAA,EAAK0B,MAAN,CAAYe,YAAa,IACtBrE,EAAMgD,QAAQsB,MAvGX,SAACC,EAAiBC,GAChC,IAAMC,EAAIzE,EAAMG,MAAOiB,eAAemD,GAChCG,EAAI1E,EAAMG,MAAOiB,eAAeoD,GAEhCG,EAAOD,EAAEE,OAASH,EAAEG,OACpBC,EAAYH,EAAEI,OAASL,EAAEK,OAE/B,MAAgB,cAAZL,EAAEjC,OACI,EAGQ,IAAdqC,EACKF,EAGFE,KAwFgChB,KAAI,SAAC3D,GAAD,OAC/B,kBAAC,EAAD,CACED,WAAYD,EAAMC,WAClBC,OAAQA,EACR4B,YAAY,cC5FjBiD,EA7BEjF,YAAO,QAAPA,CACfC,aAAS,SAACC,GAAmB,IAAD,EACCgF,YAAQ,CACjCC,OAAQzE,EAAUC,KAClByE,KAAM,iBAAO,CAAE5E,KAAMN,EAAMmC,WAC3BnB,QAAS,SAAAL,GAAO,MAAK,CACnBwE,SAAUxE,EAAQwE,SAClBC,QAASzE,EAAQyE,cANK,mBACPF,GADO,KACjBC,OADiB,MAUpBnC,EAAUhD,EAAMG,MAAOkF,gBAAgBrF,EAAMmC,UAEnD,OACE,oCACE,yBAAKb,IAAK4D,GACR,kBAAC,EAAD,CACE9B,MAAOpD,EAAMoD,MACbJ,QAASA,EACT/C,WAAYD,EAAMC,WAClB2D,MAAO5D,EAAM4D,MACbzB,SAAUnC,EAAMmC,kB,SHpBhBzC,O,eAAAA,I,qBAAAA,I,iBAAAA,I,oBAAAA,M,cAOAC,O,0BAAAA,M,cAIAC,O,eAAAA,I,mBAAAA,I,0BAAAA,M,2BAqUG0F,G,8DApTbC,OAAiB,G,KACjBC,SAAmB,G,KACnBC,OAAoB,IAAIC,UACtB,6D,wJAaFC,KAAO,SAACJ,EAAgBC,GACtB,EAAKD,OAASA,EACd,EAAKC,SAAWA,EAChB,EAAKI,MAAQ,EAAKC,WAAW,GAC7B,EAAKC,eACL,EAAKC,WAAW,GAEhB,EAAKC,UAAUC,KAAK,CAClB9D,SAAU,OACVa,QAAS,EAAK4C,MAAM/B,KAAI,SAAA1C,GAAI,OAAIA,EAAK+E,MACrCC,SAAUvG,EAASwG,OAGrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,EAAKL,UAAUC,KAAK,CAClB9D,SAAS,QAAD,OAAUkE,GAClBrD,QAAS,GACTmD,SAAUvG,EAAS0G,YAKvB,EAAKb,OAAOc,iBAAiB,QAAQ,SAAAC,GACnCC,QAAQC,IAAI,qBAId,EAAKjB,OAAOc,iBAAiB,WAAW,SAAAC,GACtC,EAAKG,gBAAgBH,EAAMI,U,KAI/Bf,WAAa,SAACgB,GAqBZ,IApBA,IAAMC,EAAS,CACb,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEIC,EAAS,CAAC,YAAa,YAAa,cAAe,YAEnDC,EAAuB,GAEzB9G,EAAS,EACJmG,EAAI,EAAGA,EAAIQ,EAAQR,IAAK,CAAC,IAAD,gBACXU,GADW,IAC/B,2BAA4B,CAAC,IAAD,EAAjBvE,EAAiB,sBACNsE,GADM,IAC1B,2BAA4B,CAAC,IAAlBzF,EAAiB,QACpByD,EAAS,EAAKmC,iBAAiBzE,EAAOnB,GAE5C2F,EAAKf,KAAK,CACR5E,MAAOA,EACPmB,MAAOA,EACP0D,GAAIhG,EACJ4E,OAAQA,EACRF,OAAQ,EAAKsC,iBAAiB7F,KAEhCnB,KAXwB,gCADG,8BAe/B,IAAK,IAAImG,EAAI,EAAGA,EAAI,EAAGA,IACrBW,EAAKf,KAAK,CACR5E,MAAO,QACPmB,MAAO,YACP0D,GAAIhG,EACJ4E,OAAQ,EACRF,OAAQ,IAEV1E,IAIJ,OAAO8G,G,KA6CTlB,aAAe,WAMb,IALA,IACEqB,EACAC,EAFEC,EAAe,EAAKzB,MAAM3C,OAKvB,IAAMoE,GAEXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GACzCA,GAAgB,EAGhBF,EAAiB,EAAKvB,MAAMyB,GAC5B,EAAKzB,MAAMyB,GAAgB,EAAKzB,MAAMwB,GACtC,EAAKxB,MAAMwB,GAAeD,G,6DAxDb9F,GACf,OAAQA,GACN,IAAK,IACH,OAAO,EACT,IAAK,IACH,OAAO,GACT,IAAK,IACH,OAAO,GACT,IAAK,IACH,OAAO,GACT,QACE,OAAON,OAAOM,M,uCAIHmB,EAAenB,GAC9B,MAAc,MAAVA,EACK,EAII,MAAVA,GAA2B,aAAVmB,GACP,OAAVnB,GAA4B,cAAVmB,GACR,MAAVnB,GAA2B,aAAVmB,EAEX,EAII,MAAVnB,GAA2B,cAAVmB,GACP,MAAVnB,GAA2B,gBAAVmB,EAEX,EAGK,MAAVnB,GAA2B,cAAVmB,EACZ,EAGF,I,iCAqBEqE,GACT,IAAK,IAAIY,EAAc,EAAGA,EAAcZ,EAAS,EAAGY,IAAe,CACjE,IAAMjC,EAAQ,gBAAYiC,GAE1BC,KAAKC,QAAQ1B,KAAK,CAChBC,GAAIV,EACJlF,KAAMoH,KAAKE,cAAcpC,GACzBqC,cAAe,IAGjBH,KAAK1B,UAAUC,KAAK,CAClB9D,SAAS,GAAD,OAAKqD,EAAL,YAAiB9F,EAAYoI,MACrC9E,QAAS,GACTmD,SAAUvG,EAASmI,SAGrBL,KAAK1B,UAAUC,KAAK,CAClB9D,SAAS,GAAD,OAAKqD,EAAL,YAAiB9F,EAAYsI,SACrChF,QAAS,GACTmD,SAAUvG,EAASmI,SAGrBL,KAAK1B,UAAUC,KAAK,CAClB9D,SAAS,GAAD,OAAKqD,EAAL,YAAiB9F,EAAYuI,QACrCjF,QAAS,GACTmD,SAAUvG,EAASmI,SAGrBL,KAAK1B,UAAUC,KAAK,CAClB9D,SAAS,GAAD,OAAKqD,EAAL,YAAiB9F,EAAYwI,OACrClF,QAAS,GACTmD,SAAUvG,EAASmI,Y,oCAKXvC,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,OACT,IAAK,UACH,MAAO,OACT,IAAK,UACH,MAAO,SACT,IAAK,UACH,MAAO,SAGX,MAAO,K,4CAGaqB,GACpB,IADoC,EAChCsB,EAAeT,KAAKrC,gBAAgB,QADJ,cAGfqC,KAAKC,SAHU,IAGpC,2BACE,IADkC,IAAzBS,EAAwB,QACxB/B,EAAI,EAAGA,EAAIQ,EAAQR,IAAK,CAC/B,IAAMgC,EAAiBF,EAAaG,MACpCZ,KAAK5G,aAAL,UAAqBsH,EAAOlC,GAA5B,YAAkCxG,EAAYoI,MAAQO,IANtB,iC,sCAWtBlG,GACd,IAAMoG,EAAWb,KAAK1B,UAAUwC,QAC9B,SAAAD,GAAQ,OAAIA,EAASpG,WAAaA,KAGpC,OAAKoG,EAAStF,OAIPsF,EAAS,GAAGvF,QAHV,K,mCAMEyF,EAAgBvI,GAC3B,IAAM0G,EAAO,CACXrG,KAAMZ,EAAU+I,UAChBC,KAAM,CACJF,OAAQA,EACRvI,OAAQA,IAGZwH,KAAKjC,OAAOmD,KACVC,KAAKC,UAAU,CAAEC,QAAS,cAAenC,KAAMiC,KAAKC,UAAUlC,Q,qCAInD1G,GACb,OAAOwH,KAAK9B,MAAMoD,MAAK,SAAA7H,GAAI,OAAIA,EAAK+E,KAAOhG,O,mDAIhBA,EAAgB+I,GAA0B,IAAD,gBACjDvB,KAAK1B,WAD4C,IACpE,2BAAmC,CAAC,IAAzBkD,EAAwB,QAC7BA,EAAK/G,WAAa8G,GACkB,IAAlCC,EAAKlG,QAAQmG,QAAQjJ,IACvBgJ,EAAKlG,QAAQiD,KAAK/F,GAGpBgJ,EAAKlG,QAAUkG,EAAKlG,QAAQwF,QAAO,SAAAtC,GAAE,OAAIA,IAAOhG,MAPgB,iC,mCAYzDkJ,GACX,IAD6B,EACvBpG,EAAU0E,KAAKrC,gBAAgB+D,GAE/BX,EAAM,UAAMf,KAAKlC,SAAX,YAAuB9F,EAAYuI,QAHlB,cAKRjF,GALQ,IAK7B,2BAA+B,CAAC,IAArB9C,EAAoB,QAC7BwH,KAAK5G,aAAa2H,EAAQvI,IANC,iC,sCAUfsG,GACd,IACE,IAAM6C,EAAkBR,KAAKS,MAAM9C,GACnC,GAAI6C,EAAgBV,KACLjB,KAAK1B,UAAUgD,MAC1B,SAAAE,GAAI,OAAIA,EAAK/G,WAAakH,EAAgBV,KAAKF,WAG/Cf,KAAK6B,6BACHF,EAAgBV,KAAKzI,OACrBmJ,EAAgBV,KAAKF,QAGzBf,KAAK8B,oBAAiBtG,EAExB,MAAOuG,GAEP,YADAhD,QAAQC,IAAI+C,M,iCAKLvJ,GACTwH,KAAK8B,eAAiBtJ,I,8BAGhBiC,GACDuF,KAAK8B,gBAAmBrH,IAI7BuF,KAAK5G,aAAaqB,EAAUuF,KAAK8B,gBACjC9B,KAAK8B,oBAAiBtG,O,4CA1SvBwG,K,wEAIK,M,mCACLA,K,wEAAmC,M,qCACnCA,K,wEAAgC,M,4CAEhCA,K,8HA4OAC,K,4FI7IYC,EA5Id9J,YAAO,Q,GACPC,a,wTAIsB,IAAD,OACZqI,EAASV,KAAK1H,MAAMG,MAAOwH,QAAQa,QACvC,SAAAJ,GAAM,OAAIA,EAAOlC,KAAO,EAAKlG,MAAMwF,YAEf,IAAlB4C,EAAOnF,SAIXyE,KAAKU,OAASA,EAAO,M,+BAiErB,IAAKV,KAAKU,OACR,OAAO,KAFF,IAKCjI,EAAUuH,KAAK1H,MAAfG,MAER,OACE,kBAACkD,EAAA,EAAD,KACE,4BAAKlD,EAAOyH,cAAcF,KAAK1H,MAAMwF,WACrC,kBAACnC,EAAA,EAAD,KACE,kBAAC,EAAD,CACED,OAAO,EACPnD,WAAYyH,KAAK1H,MAAMwF,WAAakC,KAAK1H,MAAMG,MAAOqF,SACtDrD,SAAQ,UAAKuF,KAAKU,OAAOlC,GAAjB,YAAuBxG,EAAYoI,SAG/C,kBAACzE,EAAA,EAAD,KACE,kBAACwG,EAAA,EAAD,CAAO3F,QAAO,uBAAkBwD,KAAK5C,UACrC,kBAAC+E,EAAA,EAAD,CAAO3F,QAAO,yBAAiBwD,KAAKoC,eACpC,kBAACC,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CACE7G,OAAO,EACPnD,YAAY,EACZkC,SAAQ,UAAKuF,KAAKU,OAAOlC,GAAjB,YAAuBxG,EAAYsI,SAC3CpE,MAAO,cAGX,kBAACmG,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CACE7G,OAAO,EACPnD,YAAY,EACZkC,SAAQ,UAAKuF,KAAKU,OAAOlC,GAAjB,YAAuBxG,EAAYuI,QAC3CrE,MAAO,YAGX,kBAACmG,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CACE7G,OAAO,EACPnD,YAAY,EACZkC,SAAQ,UAAKuF,KAAKU,OAAOlC,GAAjB,YAAuBxG,EAAYwI,OAC3CtE,MAAO,cAKf,kBAACP,EAAA,EAAD,KACGlD,GACCA,EAAMqJ,gBACN9B,KAAK1H,MAAMwF,WAAarF,EAAMqF,UAC5B,kBAAC,EAAD,CACEvF,YAAY,EACZC,OAAQC,EAAMqJ,eACd1H,YAAY,Q,6BAlHZ,IAAD,EACiB4F,KAAK1H,MAAzBG,EADG,EACHA,MAAOqF,EADJ,EACIA,SAEf,IAAKrF,EACH,OAAO,EAGT,IAPW,EAOP+J,EAAe/J,EAAMkF,gBAAN,UACdG,EADc,YACF9F,EAAYuI,SAGzBkC,EAAehK,EAAMkF,gBAAN,UACdG,EADc,YACF9F,EAAYwI,QAGzBkC,EAAiBjK,EAAMkF,gBAAN,UAChBG,EADgB,YACJ9F,EAAYsI,UAGzBlD,EAAS,EAnBF,cAqBUoF,EAClBG,OAAOF,GACPE,OAAOD,IAvBC,IAqBX,2BAE2B,CAAC,IAFjBlK,EAEgB,QAEzB4E,GADa3E,EAAMiB,eAAelB,GACnB4E,QAzBN,8BA4BX,OAAOA,I,kCAIU,IAAD,EACY4C,KAAK1H,MAAzBG,EADQ,EACRA,MAAOqF,EADC,EACDA,SAEf,IAAKrF,EACH,OAAO,EAGT,IAPgB,EAOZmK,EAAkBnK,EAAMkF,gBAAN,UACjBG,EADiB,YACL9F,EAAYsI,UAGzBmC,EAAehK,EAAMkF,gBAAN,UACdG,EADc,YACF9F,EAAYwI,QAGzBpD,EAAS,EAfG,cAiBKwF,GAjBL,IAiBhB,2BAAsC,SACpCxF,KAlBc,kDAqBKqF,GArBL,IAqBhB,2BAAmC,SACjCrF,GAAU,GAtBI,8BAyBhB,OAAOA,M,GAxEUyF,a,oCAClBb,K,wGAaAc,K,0GAgCAA,K,qFC1CUhK,EAAY,CACvBC,KAAM,QAwHOgK,GAlHd3K,YAAO,Q,GACPC,a,iYA4BC2K,iBAAmB,SAAClE,EAAYmE,GAC9B,EAAKC,WAAaD,EAAMtJ,O,kEArBxB,IAAMmE,EAAWkC,KAAKmD,cACtBnD,KAAK1H,MAAMG,MAAOwF,KAAK,OAAQH,K,oCAI/B,IAAMsF,EAAWC,OAAOC,SAASC,KAAKC,MAAM,KAE5C,GAAIJ,EAAS7H,OAAS,EACpB,MAAO,GAGT,IAAMkI,EAAQL,EAAS,GAAGI,MAAM,KAEhC,MAAiB,aAAbC,EAAM,GACDA,EAAM,GAGR,K,+BAwBC,IAAD,OACChL,EAAUuH,KAAK1H,MAAfG,MAER,OAAKA,GAAgC,IAAvBA,EAAMyF,MAAM3C,OAKxB,kBAACmI,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAACC,EAAA,EAAD,CAAQC,GAAI,MAAZ,UAEqB,YAApBrL,EAAOqF,UACN,yBACEjE,MAAO,CAAEa,QAAS,GAAIqJ,aAAc,GAAIC,gBAAiB,SAEzD,kBAAC,EAAD,CACEtI,OAAO,EACPJ,QAAS7C,EAAMkF,gBAAgB,QAC/BpF,YAAY,IAEd,kBAACuD,EAAA,EAAD,CACE3B,QAAS,kBACP1B,EAAMwL,sBAAsB5K,OAAO,EAAK6J,eAF5C,eAOA,kBAACgB,EAAA,EAAD,CAAOvK,MAAOqG,KAAKkD,WAAYiB,SAAUnE,KAAKgD,mBAC9C,kBAACb,EAAA,EAAD,CAAO3F,QAASwD,KAAK5C,UAIzB,kBAACiF,EAAA,EAAD,CAAMC,QAAS,GAAIzI,MAAO,CAAEC,MAAO,MAAOG,OAAQ,WAC/CxB,EAAM6F,UACJwC,QAAO,SAAAU,GAAI,OAAIA,EAAK/C,WAAavG,EAAS0G,aAC1CzC,KAAI,SAAAqF,GAAI,OACP,kBAACa,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CACE9H,SAAU+G,EAAK/G,SACfiB,OAAO,EACPnD,YAAY,SAMtB,kBAAC8J,EAAA,EAAD,CAAMC,QAAS,EAAG8B,SAAS,GACzB,kBAAC/B,EAAA,EAAKgC,IAAN,KACE,kBAAChC,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAQzE,SAAU,aAEpB,kBAACuE,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAQzE,SAAU,aAEpB,kBAACuE,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAQzE,SAAU,gBAnDnB,O,6BApBG,IACJrF,EAAUuH,KAAK1H,MAAfG,MAER,IAAKA,EACH,OAAO,EAGT,IAPW,EAOP2E,EAAS,EAPF,cAQU3E,EAAMkF,gBAAgB,SARhC,IAQX,2BAAoD,CAAC,IAA1CnF,EAAyC,QAElD4E,GADa3E,EAAMiB,eAAelB,GACnB4E,QAVN,8BAaX,OAAOA,M,GA7COyF,a,0CACfb,K,yEAAmC,K,wCACnCA,K,yEAAiC,K,oCACjCA,K,yEAA6B,K,wCAC7BA,K,wEAAgC,O,kCA2BhCc,K,gFC/CiBwB,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCRN,IAAMC,GAAiB,IAAI7G,EAE3B8G,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUnM,MAAOgM,IACf,kBAAC,GAAD,QAGJI,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvG,QAAQuG,MAAMA,EAAMjE,c","file":"static/js/main.2e3ae3f2.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\n\nexport interface IPlayingCard {\n  id: number;\n  value: string;\n  color: string;\n  points: number;\n  number: number;\n}\n\nexport interface IPlayer {\n  id: string;\n  name: string;\n  pointsInTotal: number;\n}\n\nexport enum PlayerPiles {\n  HAND = 0,\n  SVUPPER = 1,\n  MULLE = 2,\n  POINTS = 3\n}\n\nexport enum EventType {\n  CARD_MOVE = 0\n}\n\nexport enum PileType {\n  MAIN = 0,\n  PLAYER = 1,\n  PLAY_AREA = 2\n}\n\ninterface IGameStateMove {\n  toPile: string;\n  cardId: number;\n}\n\ninterface IGameStateChange {\n  type: EventType;\n  move: IGameStateMove;\n}\n\nclass PlayMaker {\n  gameId: string = \"\";\n  playerId: string = \"\";\n  socket: WebSocket = new WebSocket(\n    \"wss://c0gv6ahxt5.execute-api.eu-west-1.amazonaws.com/Prod\"\n  );\n\n  @observable cardPiles: {\n    position: string;\n    cardIds: number[];\n    pileType?: PileType;\n  }[] = [];\n  @observable cards: IPlayingCard[] = [];\n  @observable players: IPlayer[] = [];\n\n  @observable selectedCardId: number | undefined = undefined;\n\n  init = (gameId: string, playerId: string) => {\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.cards = this.createDeck(2);\n    this.shuffleCards();\n    this.addPlayers(3);\n\n    this.cardPiles.push({\n      position: \"main\",\n      cardIds: this.cards.map(card => card.id),\n      pileType: PileType.MAIN\n    });\n\n    for (let i = 0; i < 10; i++) {\n      this.cardPiles.push({\n        position: `play_${i}`,\n        cardIds: [],\n        pileType: PileType.PLAY_AREA\n      });\n    }\n\n    // Connection opened\n    this.socket.addEventListener(\"open\", event => {\n      console.log(\"Websocket open\");\n    });\n\n    // Listen for messages\n    this.socket.addEventListener(\"message\", event => {\n      this.updateGameState(event.data);\n    });\n  };\n\n  createDeck = (amount: number) => {\n    const values = [\n      \"K\",\n      \"Q\",\n      \"J\",\n      \"10\",\n      \"9\",\n      \"8\",\n      \"7\",\n      \"6\",\n      \"5\",\n      \"4\",\n      \"3\",\n      \"2\",\n      \"A\"\n    ];\n    const colors = [\"ruder.png\", \"kloer.png\", \"hjerter.png\", \"spar.png\"];\n\n    const deck: IPlayingCard[] = [];\n\n    let cardId = 0;\n    for (let i = 0; i < amount; i++) {\n      for (const color of colors) {\n        for (const value of values) {\n          const points = this.getPointsForCard(color, value);\n\n          deck.push({\n            value: value,\n            color: color,\n            id: cardId,\n            points: points,\n            number: this.getNumberForCard(value)\n          });\n          cardId++;\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        deck.push({\n          value: \"Joker\",\n          color: \"joker.png\",\n          id: cardId,\n          points: 1,\n          number: 1\n        });\n        cardId++;\n      }\n    }\n\n    return deck;\n  };\n\n  getNumberForCard(value: string) {\n    switch (value) {\n      case \"A\":\n        return 1;\n      case \"K\":\n        return 13;\n      case \"Q\":\n        return 12;\n      case \"J\":\n        return 11;\n      default:\n        return Number(value);\n    }\n  }\n\n  getPointsForCard(color: string, value: string) {\n    if (value === \"A\") {\n      return 1;\n    }\n\n    if (\n      (value === \"2\" && color === \"spar.png\") ||\n      (value === \"10\" && color === \"ruder.png\") ||\n      (value === \"5\" && color === \"spar.png\")\n    ) {\n      return 2;\n    }\n\n    if (\n      (value === \"5\" && color === \"kloer.png\") ||\n      (value === \"4\" && color === \"hjerter.png\")\n    ) {\n      return 3;\n    }\n\n    if (value === \"6\" && color === \"ruder.png\") {\n      return 4;\n    }\n\n    return 0;\n  }\n\n  shuffleCards = () => {\n    let currentIndex = this.cards.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = this.cards[currentIndex];\n      this.cards[currentIndex] = this.cards[randomIndex];\n      this.cards[randomIndex] = temporaryValue;\n    }\n  };\n\n  addPlayers(amount: number) {\n    for (let playerIndex = 1; playerIndex < amount + 1; playerIndex++) {\n      const playerId = `player${playerIndex}`;\n\n      this.players.push({\n        id: playerId,\n        name: this.getPlayerName(playerId),\n        pointsInTotal: 0\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.HAND}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.SVUPPER}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.POINTS}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.MULLE}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n    }\n  }\n\n  getPlayerName(playerId: string) {\n    switch (playerId) {\n      case \"player1\":\n        return \"Mads\";\n      case \"player2\":\n        return \"Anna\";\n      case \"player3\":\n        return \"Farmor\";\n      case \"player4\":\n        return \"Farfar\";\n    }\n\n    return \"\";\n  }\n\n  dealCardsToAllPlayers(amount: number) {\n    let currentCards = this.getCardsForPile(\"main\");\n\n    for (const player of this.players) {\n      for (let i = 0; i < amount; i++) {\n        const cardIdToBeSent = currentCards.pop();\n        this.emitCardMove(`${player.id}_${PlayerPiles.HAND}`, cardIdToBeSent!);\n      }\n    }\n  }\n\n  getCardsForPile(position: string) {\n    const cardPile = this.cardPiles.filter(\n      cardPile => cardPile.position === position\n    );\n\n    if (!cardPile.length) {\n      return [];\n    }\n\n    return cardPile[0].cardIds;\n  }\n\n  emitCardMove(toPile: string, cardId: number) {\n    const data = {\n      type: EventType.CARD_MOVE,\n      move: {\n        toPile: toPile,\n        cardId: cardId\n      }\n    };\n    this.socket.send(\n      JSON.stringify({ message: \"sendmessage\", data: JSON.stringify(data) })\n    );\n  }\n\n  getPlayingCard(cardId: number | undefined): IPlayingCard {\n    return this.cards.find(card => card.id === cardId)!;\n  }\n\n  @action\n  moveCardFromOnePileToAnother(cardId: number, newPilePosition: string) {\n    for (const pile of this.cardPiles) {\n      if (pile.position === newPilePosition) {\n        if (pile.cardIds.indexOf(cardId) === -1) {\n          pile.cardIds.push(cardId);\n        }\n      } else {\n        pile.cardIds = pile.cardIds.filter(id => id !== cardId);\n      }\n    }\n  }\n\n  takePileHome(fromPile: string) {\n    const cardIds = this.getCardsForPile(fromPile);\n\n    const toPile = `${this.playerId}_${PlayerPiles.POINTS}`;\n\n    for (const cardId of cardIds!) {\n      this.emitCardMove(toPile, cardId);\n    }\n  }\n\n  updateGameState(event: string) {\n    try {\n      const gameStateChange = JSON.parse(event) as IGameStateChange;\n      if (gameStateChange.move) {\n        const pile = this.cardPiles.find(\n          pile => pile.position === gameStateChange.move.toPile\n        );\n        if (pile) {\n          this.moveCardFromOnePileToAnother(\n            gameStateChange.move.cardId,\n            gameStateChange.move.toPile\n          );\n        }\n        this.selectedCardId = undefined;\n      }\n    } catch (e) {\n      console.log(e);\n      return;\n    }\n  }\n\n  selectCard(cardId: number) {\n    this.selectedCardId = cardId;\n  }\n\n  putCard(position: string | undefined) {\n    if (!this.selectedCardId || !position) {\n      return;\n    }\n\n    this.emitCardMove(position, this.selectedCardId);\n    this.selectedCardId = undefined;\n  }\n}\n\nexport default PlayMaker;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Card, Grid } from \"semantic-ui-react\";\nimport { useDrag, DragSourceMonitor } from \"react-dnd\";\nimport { ItemTypes } from \"../../App\";\nimport PlayMaker from \"../../logic/store\";\n\ninterface IProps {\n  cardId: number;\n  backsideUp: boolean;\n  selectable: boolean;\n  store?: PlayMaker;\n}\n\nconst PlayingCard = inject(\"store\")(\n  observer((props: IProps) => {\n    const { backsideUp, cardId, store } = props;\n\n    const [{ isDragging }, drag] = useDrag({\n      item: { name: cardId, type: ItemTypes.CARD },\n      end: (item: { name: string } | undefined, monitor: DragSourceMonitor) => {\n        const dropResult = monitor.getDropResult();\n        if (item && dropResult) {\n          props.store!.emitCardMove(dropResult.name, Number(item.name));\n        }\n      },\n      collect: (monitor) => ({\n        isDragging: !!monitor.isDragging(),\n      }),\n    });\n\n    const card = store!.getPlayingCard(cardId);\n\n    const displayValue = card.value === \"Joker\" ? \"\" : card.value;\n\n    return (\n      <div\n        ref={drag}\n        style={{\n          width: 60,\n          opacity: isDragging ? 0.5 : 1,\n          cursor: \"move\",\n          margin: \"0 auto\",\n        }}\n      >\n        <Card\n          onClick={() => {\n            if (props.selectable) {\n              props.store?.selectCard(props.cardId);\n            }\n          }}\n          style={{ width: 60, height: 80 }}\n        >\n          {backsideUp ? (\n            <img\n              src={\"/mulle-card-game/img/bagside.png\"}\n              alt=\"\"\n              style={{ width: \"100%\" }}\n            />\n          ) : (\n            <div\n              style={{\n                position: \"relative\",\n                height: 80,\n                width: 60,\n                padding: 8,\n                fontWeight: \"bold\",\n                border: \"1px solid #DDD\",\n                borderRadius: 5,\n              }}\n            >\n              {card.value === \"Joker\" ? (\n                <>\n                  <img\n                    src={`/mulle-card-game/img/${card.color}`}\n                    alt=\"\"\n                    style={{ width: 40, height: 40 }}\n                  />\n                </>\n              ) : (\n                <>\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: 0,\n                      left: 2,\n                      width: 30,\n                    }}\n                  >\n                    <span\n                      style={{\n                        position: \"absolute\",\n                        top: -2,\n                        left: 1,\n                        textAlign: \"center\",\n                        fontSize: 12,\n                        color:\n                          card.color === \"ruder.png\" ||\n                          card.color === \"hjerter.png\"\n                            ? \"red\"\n                            : \"black\",\n                      }}\n                    >\n                      {card.value}\n                    </span>\n                    <img\n                      src={`/mulle-card-game/img/${card.color}`}\n                      alt=\"\"\n                      style={{\n                        position: \"absolute\",\n                        left: 10,\n                        width: 20,\n                      }}\n                    />\n                  </div>\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: 25,\n                      left: 2,\n                    }}\n                  >\n                    <img\n                      src={`/mulle-card-game/img/${card.color}`}\n                      alt=\"\"\n                      style={{\n                        width: \"56px\",\n                        top: -3,\n                        left: -1,\n                        position: \"absolute\",\n                      }}\n                    />\n                    <div\n                      style={{\n                        textAlign: \"center\",\n                        fontSize: 18,\n                        position: \"absolute\",\n                        left: 20,\n                        top: 14,\n                        color: \"white\",\n                      }}\n                    >\n                      <span\n                        style={{\n                          textShadow: \"black 2px 2px 3px\",\n                        }}\n                      >\n                        {card.value}\n                      </span>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </Card>\n      </div>\n    );\n  })\n);\n\nexport default observer(PlayingCard);\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport PlayMaker, { IPlayingCard } from \"../../logic/store\";\nimport PlayingCard from \"../PlayingCard\";\nimport { Card, Popup, Button, Segment } from \"semantic-ui-react\";\n\ninterface IProps {\n  cardIds: number[];\n  backsideUp: boolean;\n  piled: boolean;\n  position?: string;\n  title?: string;\n  store?: PlayMaker;\n}\n\nconst PileOfCards = inject(\"store\")(\n  observer((props: IProps) => {\n    const upperCardId = props.cardIds.length\n      ? props.cardIds[props.cardIds.length - 1]\n      : undefined;\n\n    const secondUpperCardId =\n      props.cardIds.length > 1 && props.piled && !props.backsideUp\n        ? props.cardIds[props.cardIds.length - 2]\n        : undefined;\n\n    const displayTooltip =\n      props.piled && !props.backsideUp && props.cardIds.length > 0;\n\n    const sorting = (aCardId: number, bCardId: number) => {\n      const a = props.store!.getPlayingCard(aCardId);\n      const b = props.store!.getPlayingCard(bCardId);\n\n      const diff = b.number - a.number;\n      const pointDiff = b.points - a.points;\n\n      if (a.color === \"joker.png\") {\n        return -1;\n      }\n\n      if (pointDiff === 0) {\n        return diff;\n      }\n\n      return pointDiff;\n    };\n\n    return (\n      <Segment.Group style={{ minWidth: 70 }}>\n        <Segment textAlign={\"center\"}>\n          {props.piled && (\n            <Button\n              size={\"large\"}\n              onClick={() => props.store!.putCard(props.position)}\n              icon={\"arrow alternate circle down\"}\n            />\n          )}\n          {props.title && <span>{props.title}</span>}\n        </Segment>\n        {upperCardId !== undefined && (\n          <>\n            {props.piled ? (\n              <>\n                <Segment\n                  piled={true}\n                  textAlign={\"center\"}\n                  style={{\n                    height: props.backsideUp\n                      ? 100\n                      : 100 + props.cardIds.length * 20,\n                  }}\n                >\n                  {props.backsideUp && props.cardIds.length && (\n                    <PlayingCard\n                      cardId={props.cardIds[0]}\n                      backsideUp={true}\n                      selectable={false}\n                    />\n                  )}\n                  {!props.backsideUp &&\n                    props.cardIds.map((cardId, index) => (\n                      <div\n                        style={{\n                          position: \"absolute\",\n                          top: index * 20,\n                        }}\n                      >\n                        <PlayingCard\n                          cardId={cardId}\n                          backsideUp={false}\n                          selectable={false}\n                        />\n                      </div>\n                    ))}\n                  <Popup\n                    flowing={true}\n                    trigger={<Button content={props.cardIds.length} />}\n                    content={\n                      <span>\n                        {props.cardIds.map((cardId) => (\n                          <PlayingCard\n                            selectable={false}\n                            backsideUp={props.backsideUp}\n                            cardId={cardId}\n                          />\n                        ))}\n                      </span>\n                    }\n                  />\n                </Segment>\n                <Segment textAlign={\"center\"}>\n                  <Button.Group>\n                    {displayTooltip && (\n                      <Popup\n                        trigger={\n                          <Button\n                            size={\"large\"}\n                            icon={\"globe\"}\n                            onClick={() =>\n                              props.store!.takePileHome(props.position!)\n                            }\n                          />\n                        }\n                        content={\"Tag bunken hjem\"}\n                        inverted={true}\n                      />\n                    )}\n                  </Button.Group>\n                </Segment>\n              </>\n            ) : (\n              <Card.Group itemsPerRow={10}>\n                {props.cardIds.sort(sorting).map((cardId) => (\n                  <PlayingCard\n                    backsideUp={props.backsideUp}\n                    cardId={cardId}\n                    selectable={true}\n                  />\n                ))}\n              </Card.Group>\n            )}\n          </>\n        )}\n      </Segment.Group>\n    );\n  })\n);\n\nexport default PileOfCards;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"../../App\";\nimport PileOfCards from \"../PileOfCards\";\nimport { inject, observer } from \"mobx-react\";\nimport PlayMaker from \"../../logic/store\";\n\ninterface IProps {\n  position: string;\n  backsideUp: boolean;\n  piled: boolean;\n  title?: string;\n  store?: PlayMaker;\n}\n\nconst PlayArea = inject(\"store\")(\n  observer((props: IProps) => {\n    const [{ isOver }, drop] = useDrop({\n      accept: ItemTypes.CARD,\n      drop: () => ({ name: props.position }),\n      collect: monitor => ({\n        isOver: !!monitor.isOver(),\n        getItem: monitor.getItem()\n      })\n    });\n\n    const cardIds = props.store!.getCardsForPile(props.position);\n\n    return (\n      <>\n        <div ref={drop}>\n          <PileOfCards\n            piled={props.piled}\n            cardIds={cardIds}\n            backsideUp={props.backsideUp}\n            title={props.title}\n            position={props.position}\n          />\n        </div>\n      </>\n    );\n  })\n);\n\nexport default PlayArea;\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Segment, Grid, Label } from \"semantic-ui-react\";\nimport PileOfCards from \"../PileOfCards\";\nimport PlayMaker, { IPlayer, PlayerPiles } from \"../../logic/store\";\nimport { observable, computed } from \"mobx\";\nimport PlayArea from \"../PlayArea\";\nimport PlayingCard from \"../PlayingCard\";\n\ninterface IProps {\n  playerId: string;\n  store?: PlayMaker;\n}\n@inject(\"store\")\n@observer\nclass Player extends Component<IProps> {\n  @observable player: IPlayer | undefined = undefined;\n\n  componentDidMount() {\n    const player = this.props.store!.players.filter(\n      player => player.id === this.props.playerId\n    );\n    if (player.length === 0) {\n      return;\n    }\n\n    this.player = player[0];\n  }\n\n  @computed\n  get points() {\n    const { store, playerId } = this.props;\n\n    if (!store) {\n      return 0;\n    }\n\n    let pointCardIds = store.getCardsForPile(\n      `${playerId}_${PlayerPiles.POINTS}`\n    );\n\n    let mulleCardIds = store.getCardsForPile(\n      `${playerId}_${PlayerPiles.MULLE}`\n    );\n\n    let svupperCardIds = store.getCardsForPile(\n      `${playerId}_${PlayerPiles.SVUPPER}`\n    );\n\n    let points = 0;\n\n    for (const cardId of pointCardIds\n      .concat(mulleCardIds)\n      .concat(svupperCardIds)) {\n      const card = store.getPlayingCard(cardId);\n      points += card.points;\n    }\n\n    return points;\n  }\n\n  @computed\n  get loosePoints() {\n    const { store, playerId } = this.props;\n\n    if (!store) {\n      return 0;\n    }\n\n    let svuppereCardIds = store.getCardsForPile(\n      `${playerId}_${PlayerPiles.SVUPPER}`\n    );\n\n    let mulleCardIds = store.getCardsForPile(\n      `${playerId}_${PlayerPiles.MULLE}`\n    );\n\n    let points = 0;\n\n    for (const cardId of svuppereCardIds) {\n      points++;\n    }\n\n    for (const cardId of mulleCardIds) {\n      points += 5;\n    }\n\n    return points;\n  }\n\n  render() {\n    if (!this.player) {\n      return null;\n    }\n\n    const { store } = this.props;\n\n    return (\n      <Segment>\n        <h2>{store!.getPlayerName(this.props.playerId)}</h2>\n        <Segment>\n          <PlayArea\n            piled={false}\n            backsideUp={this.props.playerId !== this.props.store!.playerId}\n            position={`${this.player.id}_${PlayerPiles.HAND}`}\n          />\n        </Segment>\n        <Segment>\n          <Label content={`Faste point: ${this.points}`} />\n          <Label content={`Løse point: ${this.loosePoints}`} />\n          <Grid columns={3}>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={false}\n                position={`${this.player.id}_${PlayerPiles.SVUPPER}`}\n                title={\"Svuppere\"}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={true}\n                position={`${this.player.id}_${PlayerPiles.POINTS}`}\n                title={\"Bunken\"}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={false}\n                position={`${this.player.id}_${PlayerPiles.MULLE}`}\n                title={\"Muller\"}\n              />\n            </Grid.Column>\n          </Grid>\n        </Segment>\n        <Segment>\n          {store &&\n            store.selectedCardId &&\n            this.props.playerId === store.playerId && (\n              <PlayingCard\n                backsideUp={false}\n                cardId={store.selectedCardId}\n                selectable={false}\n              />\n            )}\n        </Segment>\n      </Segment>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { observable, computed } from \"mobx\";\nimport \"./App.css\";\nimport {\n  Button,\n  Grid,\n  Input,\n  InputOnChangeData,\n  Header,\n  Label\n} from \"semantic-ui-react\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport PlayArea from \"./components/PlayArea\";\nimport PlayMaker, { PileType } from \"./logic/store\";\nimport PileOfCards from \"./components/PileOfCards\";\nimport Player from \"./components/Player\";\n\nexport const ItemTypes = {\n  CARD: \"card\"\n};\n\ninterface IProps {\n  store?: PlayMaker;\n}\n@inject(\"store\")\n@observer\nclass App extends Component<IProps> {\n  @observable showBackside: boolean = false;\n  @observable putInStack: boolean = false;\n  @observable isOver: boolean = false;\n  @observable dealAmount: string = \"8\";\n\n  componentDidMount() {\n    const playerId = this.getPlayerId();\n    this.props.store!.init(\"test\", playerId);\n  }\n\n  getPlayerId() {\n    const urlParts = window.location.href.split(\"?\");\n\n    if (urlParts.length < 2) {\n      return \"\";\n    }\n\n    const param = urlParts[1].split(\"=\");\n\n    if (param[0] === \"playerId\") {\n      return param[1];\n    }\n\n    return \"\";\n  }\n\n  changeDealAmount = (event: any, input: InputOnChangeData) => {\n    this.dealAmount = input.value;\n  };\n\n  @computed\n  get points() {\n    const { store } = this.props;\n\n    if (!store) {\n      return 0;\n    }\n\n    let points = 0;\n    for (const cardId of store.getCardsForPile(\"main\")) {\n      const card = store.getPlayingCard(cardId);\n      points += card.points;\n    }\n\n    return points;\n  }\n\n  render() {\n    const { store } = this.props;\n\n    if (!store || store.cards.length === 0) {\n      return null;\n    }\n\n    return (\n      <DndProvider backend={Backend}>\n        <Header as={\"h1\"}>Mulle!</Header>\n\n        {store!.playerId === \"player1\" && (\n          <div\n            style={{ padding: 30, marginBottom: 50, backgroundColor: \"#AAA\" }}\n          >\n            <PileOfCards\n              piled={true}\n              cardIds={store.getCardsForPile(\"main\")}\n              backsideUp={true}\n            />\n            <Button\n              onClick={() =>\n                store.dealCardsToAllPlayers(Number(this.dealAmount))\n              }\n            >\n              Fordel kort\n            </Button>\n            <Input value={this.dealAmount} onChange={this.changeDealAmount} />\n            <Label content={this.points} />\n          </div>\n        )}\n\n        <Grid columns={10} style={{ width: \"80%\", margin: \"0 auto\" }}>\n          {store.cardPiles\n            .filter(pile => pile.pileType === PileType.PLAY_AREA)\n            .map(pile => (\n              <Grid.Column>\n                <PlayArea\n                  position={pile.position}\n                  piled={true}\n                  backsideUp={false}\n                />\n              </Grid.Column>\n            ))}\n        </Grid>\n\n        <Grid columns={3} divided={true}>\n          <Grid.Row>\n            <Grid.Column>\n              <Player playerId={\"player1\"} />\n            </Grid.Column>\n            <Grid.Column>\n              <Player playerId={\"player2\"} />\n            </Grid.Column>\n            <Grid.Column>\n              <Player playerId={\"player3\"} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </DndProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport \"./index.css\";\nimport \"core-js\";\nimport \"raf/polyfill\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport PlayMaker from \"./logic/store\";\n\nconst PlayMakerStore = new PlayMaker();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={PlayMakerStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}