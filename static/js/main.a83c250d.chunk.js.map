{"version":3,"sources":["logic/store.ts","components/PlayingCard/index.tsx","components/PileOfCards/index.tsx","components/PlayArea/index.tsx","components/Player/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerPiles","EventType","PileType","PlayingCard","inject","observer","props","backsideUp","cardId","store","useDrag","item","name","type","ItemTypes","CARD","end","monitor","dropResult","getDropResult","emitCardMove","Number","collect","isDragging","drag","card","getPlayingCard","displayValue","value","ref","style","width","opacity","cursor","margin","Card","onClick","selectable","selectCard","height","src","alt","position","padding","fontWeight","border","borderRadius","right","top","left","bottom","Array","number","map","i","color","PileOfCards","upperCardId","cardIds","length","undefined","displayTooltip","piled","Button","size","putCard","icon","title","paddingTop","selectedCardId","Group","Popup","flowing","trigger","content","takePileHome","inverted","itemsPerRow","sort","PlayArea","useDrop","accept","drop","isOver","getItem","getCardsForPile","backgroundColor","marginTop","PlayMaker","gameId","playerId","socket","WebSocket","init","cards","createDeck","shuffleCards","addPlayers","cardPiles","push","id","pileType","MAIN","PLAY_AREA","addEventListener","event","console","log","updateGameState","data","amount","values","colors","deck","points","getPointsForCard","getNumberForCard","temporaryValue","randomIndex","currentIndex","Math","floor","random","playerIndex","this","players","pointsInTotal","HAND","PLAYER","SVUPPER","POINTS","MULLE","currentCards","player","cardIdToBeSent","pop","cardPile","filter","toPile","CARD_MOVE","move","send","JSON","stringify","message","find","newPilePosition","pile","indexOf","fromPile","moveCardFromOnePileToAnother","gameStateChange","parse","e","observable","action","Player","Segment","Label","loosePoints","Grid","columns","Column","pointCardIds","mulleCardIds","svupperCardIds","concat","svuppereCardIds","Component","computed","App","changeDealAmount","input","dealAmount","getPlayerId","urlParts","window","location","href","split","param","DndProvider","backend","Backend","Header","dealCardsToAllPlayers","Input","onChange","divided","Row","Boolean","hostname","match","PlayMakerStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a83c250d.chunk.js","sourcesContent":["import { observable, action, toJS } from \"mobx\";\n\nexport interface IPlayingCard {\n  id: number;\n  value: string;\n  color: string;\n  points: number;\n  number: number;\n}\n\nexport interface IPlayer {\n  id: string;\n  name: string;\n  pointsInTotal: number;\n}\n\nexport enum PlayerPiles {\n  HAND = 0,\n  SVUPPER = 1,\n  MULLE = 2,\n  POINTS = 3\n}\n\nexport enum EventType {\n  CARD_MOVE = 0\n}\n\nexport enum PileType {\n  MAIN = 0,\n  PLAYER = 1,\n  PLAY_AREA = 2\n}\n\ninterface IGameStateMove {\n  toPile: string;\n  cardId: number;\n}\n\ninterface IGameStateChange {\n  type: EventType;\n  move: IGameStateMove;\n}\n\nclass PlayMaker {\n  gameId: string = \"\";\n  playerId: string = \"\";\n  socket: WebSocket = new WebSocket(\n    \"wss://c0gv6ahxt5.execute-api.eu-west-1.amazonaws.com/Prod\"\n  );\n\n  @observable cardPiles: {\n    position: string;\n    cardIds: number[];\n    pileType?: PileType;\n  }[] = [];\n  @observable cards: IPlayingCard[] = [];\n  @observable players: IPlayer[] = [];\n\n  @observable selectedCardId: number | undefined = undefined;\n\n  init = (gameId: string, playerId: string) => {\n    this.gameId = gameId;\n    this.playerId = playerId;\n    this.cards = this.createDeck(2);\n    this.shuffleCards();\n    this.addPlayers(2);\n\n    this.cardPiles.push({\n      position: \"main\",\n      cardIds: this.cards.map(card => card.id),\n      pileType: PileType.MAIN\n    });\n\n    for (let i = 0; i < 10; i++) {\n      this.cardPiles.push({\n        position: `play_${i}`,\n        cardIds: [],\n        pileType: PileType.PLAY_AREA\n      });\n    }\n\n    // Connection opened\n    this.socket.addEventListener(\"open\", event => {\n      console.log(\"Websocket open\");\n    });\n\n    // Listen for messages\n    this.socket.addEventListener(\"message\", event => {\n      this.updateGameState(event.data);\n    });\n  };\n\n  createDeck = (amount: number) => {\n    const values = [\n      \"K\",\n      \"Q\",\n      \"J\",\n      \"10\",\n      \"9\",\n      \"8\",\n      \"7\",\n      \"6\",\n      \"5\",\n      \"4\",\n      \"3\",\n      \"2\",\n      \"A\"\n    ];\n    const colors = [\"ruder.png\", \"kloer.png\", \"hjerter.png\", \"spar.png\"];\n\n    const deck: IPlayingCard[] = [];\n\n    let cardId = 0;\n    for (let i = 0; i < amount; i++) {\n      for (const color of colors) {\n        for (const value of values) {\n          const points = this.getPointsForCard(color, value);\n\n          deck.push({\n            value: value,\n            color: color,\n            id: cardId,\n            points: points,\n            number: this.getNumberForCard(value)\n          });\n          cardId++;\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        deck.push({\n          value: \"Joker\",\n          color: \"joker.png\",\n          id: cardId,\n          points: 1,\n          number: 1\n        });\n        cardId++;\n      }\n    }\n\n    return deck;\n  };\n\n  getNumberForCard(value: string) {\n    switch (value) {\n      case \"A\":\n        return 1;\n      case \"K\":\n        return 13;\n      case \"Q\":\n        return 12;\n      case \"J\":\n        return 11;\n      default:\n        return Number(value);\n    }\n  }\n\n  getPointsForCard(color: string, value: string) {\n    if (value === \"A\") {\n      return 1;\n    }\n\n    if (\n      (value === \"2\" && color === \"spar.png\") ||\n      (value === \"10\" && color === \"ruder.png\")\n    ) {\n      return 2;\n    }\n\n    if (\n      (value === \"5\" && color === \"kloer.png\") ||\n      (value === \"4\" && color === \"hjerter.png\")\n    ) {\n      return 3;\n    }\n\n    if (value === \"6\" && color === \"ruder.png\") {\n      return 4;\n    }\n\n    return 0;\n  }\n\n  shuffleCards = () => {\n    let currentIndex = this.cards.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = this.cards[currentIndex];\n      this.cards[currentIndex] = this.cards[randomIndex];\n      this.cards[randomIndex] = temporaryValue;\n    }\n  };\n\n  addPlayers(amount: number) {\n    for (let playerIndex = 1; playerIndex < amount + 1; playerIndex++) {\n      const playerId = `player${playerIndex}`;\n\n      this.players.push({\n        id: playerId,\n        name: \"\",\n        pointsInTotal: 0\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.HAND}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.SVUPPER}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.POINTS}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n\n      this.cardPiles.push({\n        position: `${playerId}_${PlayerPiles.MULLE}`,\n        cardIds: [],\n        pileType: PileType.PLAYER\n      });\n    }\n  }\n\n  dealCardsToAllPlayers(amount: number) {\n    let currentCards = this.getCardsForPile(\"main\");\n\n    for (const player of this.players) {\n      for (let i = 0; i < amount; i++) {\n        const cardIdToBeSent = currentCards.pop();\n        this.emitCardMove(`${player.id}_${PlayerPiles.HAND}`, cardIdToBeSent!);\n      }\n    }\n  }\n\n  getCardsForPile(position: string) {\n    const cardPile = this.cardPiles.filter(\n      cardPile => cardPile.position === position\n    );\n\n    if (!cardPile.length) {\n      return [];\n    }\n\n    return cardPile[0].cardIds;\n  }\n\n  emitCardMove(toPile: string, cardId: number) {\n    const data = {\n      type: EventType.CARD_MOVE,\n      move: {\n        toPile: toPile,\n        cardId: cardId\n      }\n    };\n    this.socket.send(\n      JSON.stringify({ message: \"sendmessage\", data: JSON.stringify(data) })\n    );\n  }\n\n  getPlayingCard(cardId: number | undefined): IPlayingCard {\n    return this.cards.find(card => card.id === cardId)!;\n  }\n\n  @action\n  moveCardFromOnePileToAnother(cardId: number, newPilePosition: string) {\n    for (const pile of this.cardPiles) {\n      if (pile.position === newPilePosition) {\n        if (pile.cardIds.indexOf(cardId) === -1) {\n          pile.cardIds.push(cardId);\n        }\n      } else {\n        pile.cardIds = pile.cardIds.filter(id => id !== cardId);\n      }\n    }\n  }\n\n  takePileHome(fromPile: string) {\n    const cardIds = this.getCardsForPile(fromPile);\n\n    const toPile = `${this.playerId}_${PlayerPiles.POINTS}`;\n\n    for (const cardId of cardIds!) {\n      this.moveCardFromOnePileToAnother(cardId, toPile);\n    }\n  }\n\n  updateGameState(event: string) {\n    try {\n      const gameStateChange = JSON.parse(event) as IGameStateChange;\n      if (gameStateChange.move) {\n        const pile = this.cardPiles.find(\n          pile => pile.position === gameStateChange.move.toPile\n        );\n        if (pile) {\n          this.moveCardFromOnePileToAnother(\n            gameStateChange.move.cardId,\n            gameStateChange.move.toPile\n          );\n        }\n      }\n    } catch (e) {\n      console.log(e);\n      return;\n    }\n  }\n\n  selectCard(cardId: number) {\n    this.selectedCardId = cardId;\n  }\n\n  putCard(position: string | undefined) {\n    if (!this.selectedCardId || !position) {\n      return;\n    }\n\n    this.emitCardMove(position, this.selectedCardId);\n    this.selectedCardId = undefined;\n  }\n}\n\nexport default PlayMaker;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Card } from \"semantic-ui-react\";\nimport { useDrag, DragSourceMonitor } from \"react-dnd\";\nimport { ItemTypes } from \"../../App\";\nimport PlayMaker from \"../../logic/store\";\n\ninterface IProps {\n  cardId: number;\n  backsideUp: boolean;\n  selectable: boolean;\n  store?: PlayMaker;\n}\n\nconst PlayingCard = inject(\"store\")(\n  observer((props: IProps) => {\n    const { backsideUp, cardId, store } = props;\n\n    const [{ isDragging }, drag] = useDrag({\n      item: { name: cardId, type: ItemTypes.CARD },\n      end: (item: { name: string } | undefined, monitor: DragSourceMonitor) => {\n        const dropResult = monitor.getDropResult();\n        if (item && dropResult) {\n          props.store!.emitCardMove(dropResult.name, Number(item.name));\n        }\n      },\n      collect: monitor => ({\n        isDragging: !!monitor.isDragging()\n      })\n    });\n\n    const card = store!.getPlayingCard(cardId);\n\n    const displayValue = card.value === \"Joker\" ? \"\" : card.value;\n\n    return (\n      <div\n        ref={drag}\n        style={{\n          width: 60,\n          opacity: isDragging ? 0.5 : 1,\n          cursor: \"move\",\n          margin: 5\n        }}\n      >\n        <Card\n          onClick={() => {\n            if (props.selectable) {\n              props.store?.selectCard(props.cardId);\n            }\n          }}\n          style={{ width: 60, height: 80 }}\n        >\n          {backsideUp ? (\n            <img src={\"/img/bagside.png\"} alt=\"\" style={{ width: \"100%\" }} />\n          ) : (\n            <div\n              style={{\n                position: \"relative\",\n                height: 80,\n                width: 60,\n                padding: 8,\n                fontWeight: \"bold\",\n                border: \"1px solid #DDD\",\n                borderRadius: 5\n              }}\n            >\n              <span style={{ position: \"absolute\", right: 0, top: 0 }}>\n                {displayValue}\n              </span>\n              <span style={{ position: \"absolute\", left: 0, top: 0 }}>\n                {displayValue}\n              </span>\n              <span style={{ position: \"absolute\", right: 0, bottom: 0 }}>\n                {displayValue}\n              </span>\n              <span style={{ position: \"absolute\", left: 0, bottom: 0 }}>\n                {displayValue}\n              </span>\n              <div style={{ right: 10, top: 10 }}>\n                {[...Array(card.number)].map(i => (\n                  <img\n                    src={`/img/${card.color}`}\n                    alt=\"\"\n                    style={{ width: 12, height: 12 }}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n    );\n  })\n);\n\nexport default observer(PlayingCard);\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport PlayMaker from \"../../logic/store\";\nimport PlayingCard from \"../PlayingCard\";\nimport { Card, Popup, Button } from \"semantic-ui-react\";\n\ninterface IProps {\n  cardIds: number[];\n  backsideUp: boolean;\n  piled: boolean;\n  position?: string;\n  title?: string;\n  store?: PlayMaker;\n}\n\nconst PileOfCards = inject(\"store\")(\n  observer((props: IProps) => {\n    const upperCardId = props.cardIds.length\n      ? props.cardIds[props.cardIds.length - 1]\n      : undefined;\n\n    const displayTooltip =\n      props.piled && !props.backsideUp && props.cardIds.length > 1;\n\n    return (\n      <div style={{ position: \"relative\" }}>\n        <div style={{ position: \"absolute\", top: -30 }}>\n          {props.piled && (\n            <Button\n              size={\"small\"}\n              onClick={() => props.store!.putCard(props.position)}\n              icon={\"arrow alternate circle down\"}\n            />\n          )}\n          {props.title && <span>{props.title}</span>}\n        </div>\n        {upperCardId !== undefined && (\n          <>\n            {props.piled ? (\n              <div style={{ paddingTop: 20 }}>\n                <PlayingCard\n                  cardId={upperCardId}\n                  backsideUp={props.backsideUp}\n                  selectable={props.store!.selectedCardId === undefined}\n                />\n                <Button.Group>\n                  <Popup\n                    flowing={true}\n                    trigger={<Button content={props.cardIds.length} />}\n                    content={\n                      <span>\n                        {props.cardIds.map(cardId => (\n                          <PlayingCard\n                            selectable={false}\n                            backsideUp={props.backsideUp}\n                            cardId={cardId}\n                          />\n                        ))}\n                      </span>\n                    }\n                  />\n                  {displayTooltip && (\n                    <Popup\n                      trigger={\n                        <Button\n                          icon={\"globe\"}\n                          onClick={() =>\n                            props.store!.takePileHome(props.position!)\n                          }\n                        />\n                      }\n                      content={\"Tag bunken hjem\"}\n                      inverted={true}\n                    />\n                  )}\n                </Button.Group>\n              </div>\n            ) : (\n              <Card.Group itemsPerRow={10}>\n                {props.cardIds.sort().map(cardId => (\n                  <PlayingCard\n                    backsideUp={props.backsideUp}\n                    cardId={cardId}\n                    selectable={true}\n                  />\n                ))}\n              </Card.Group>\n            )}\n          </>\n        )}\n      </div>\n    );\n  })\n);\n\nexport default PileOfCards;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"../../App\";\nimport PileOfCards from \"../PileOfCards\";\nimport { inject, observer } from \"mobx-react\";\nimport PlayMaker from \"../../logic/store\";\n\ninterface IProps {\n  position: string;\n  backsideUp: boolean;\n  piled: boolean;\n  title?: string;\n  store?: PlayMaker;\n}\n\nconst PlayArea = inject(\"store\")(\n  observer((props: IProps) => {\n    const [{ isOver }, drop] = useDrop({\n      accept: ItemTypes.CARD,\n      drop: () => ({ name: props.position }),\n      collect: monitor => ({\n        isOver: !!monitor.isOver(),\n        getItem: monitor.getItem()\n      })\n    });\n\n    const cardIds = props.store!.getCardsForPile(props.position);\n\n    return (\n      <>\n        <div\n          ref={drop}\n          style={{\n            backgroundColor: isOver ? \"#DDD\" : \"#EEE\",\n            width: 80,\n            height: 130,\n            marginTop: 50\n          }}\n        >\n          <PileOfCards\n            piled={props.piled}\n            cardIds={cardIds}\n            backsideUp={props.backsideUp}\n            title={props.title}\n            position={props.position}\n          />\n        </div>\n      </>\n    );\n  })\n);\n\nexport default PlayArea;\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { Segment, Grid, Label } from \"semantic-ui-react\";\nimport PileOfCards from \"../PileOfCards\";\nimport PlayMaker, { IPlayer, PlayerPiles } from \"../../logic/store\";\nimport { observable, computed } from \"mobx\";\nimport PlayArea from \"../PlayArea\";\nimport PlayingCard from \"../PlayingCard\";\n\ninterface IProps {\n  playerId: string;\n  store?: PlayMaker;\n}\n@inject(\"store\")\n@observer\nclass Player extends Component<IProps> {\n  @observable player: IPlayer | undefined = undefined;\n\n  componentDidMount() {\n    const player = this.props.store!.players.filter(\n      player => player.id === this.props.playerId\n    );\n    if (player.length === 0) {\n      return;\n    }\n\n    this.player = player[0];\n  }\n\n  @computed\n  get points() {\n    const { store } = this.props;\n\n    if (!store) {\n      return 0;\n    }\n\n    let pointCardIds = store.getCardsForPile(\n      `${store.playerId}_${PlayerPiles.POINTS}`\n    );\n\n    let mulleCardIds = store.getCardsForPile(\n      `${store.playerId}_${PlayerPiles.MULLE}`\n    );\n\n    let svupperCardIds = store.getCardsForPile(\n      `${store.playerId}_${PlayerPiles.SVUPPER}`\n    );\n\n    let points = 0;\n\n    for (const cardId of pointCardIds\n      .concat(mulleCardIds)\n      .concat(svupperCardIds)) {\n      const card = store.getPlayingCard(cardId);\n      points += card.points;\n    }\n\n    return points;\n  }\n\n  @computed\n  get loosePoints() {\n    const { store } = this.props;\n\n    if (!store) {\n      return 0;\n    }\n\n    let svuppereCardIds = store.getCardsForPile(\n      `${store.playerId}_${PlayerPiles.SVUPPER}`\n    );\n\n    let mulleCardIds = store.getCardsForPile(\n      `${store.playerId}_${PlayerPiles.MULLE}`\n    );\n\n    let points = 0;\n\n    for (const cardId of svuppereCardIds) {\n      points++;\n    }\n\n    for (const cardId of mulleCardIds) {\n      points += 5;\n    }\n\n    return points;\n  }\n\n  render() {\n    if (!this.player) {\n      return null;\n    }\n\n    const { store } = this.props;\n\n    return (\n      <Segment>\n        <h2>{this.props.playerId}</h2>\n        <Segment>\n          <PileOfCards\n            piled={false}\n            backsideUp={this.props.playerId !== this.props.store!.playerId}\n            cardIds={store!.getCardsForPile(\n              `${this.player.id}_${PlayerPiles.HAND}`\n            )}\n          />\n        </Segment>\n        <Segment>\n          <Label content={`Faste point: ${this.points}`} />\n          <Label content={`Løse point: ${this.loosePoints}`} />\n          <Grid columns={3}>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={false}\n                position={`${this.player.id}_${PlayerPiles.SVUPPER}`}\n                title={\"Svuppere\"}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={true}\n                position={`${this.player.id}_${PlayerPiles.POINTS}`}\n                title={\"Bunken\"}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <PlayArea\n                piled={true}\n                backsideUp={false}\n                position={`${this.player.id}_${PlayerPiles.MULLE}`}\n                title={\"Muller\"}\n              />\n            </Grid.Column>\n          </Grid>\n        </Segment>\n        <Segment>\n          {store &&\n            store.selectedCardId &&\n            this.props.playerId === store.playerId && (\n              <PlayingCard\n                backsideUp={false}\n                cardId={store.selectedCardId}\n                selectable={false}\n              />\n            )}\n        </Segment>\n      </Segment>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport \"./App.css\";\nimport {\n  Button,\n  Grid,\n  Input,\n  InputOnChangeData,\n  Header\n} from \"semantic-ui-react\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport PlayArea from \"./components/PlayArea\";\nimport PlayMaker, { PileType } from \"./logic/store\";\nimport PileOfCards from \"./components/PileOfCards\";\nimport Player from \"./components/Player\";\n\nexport const ItemTypes = {\n  CARD: \"card\"\n};\n\ninterface IProps {\n  store?: PlayMaker;\n}\n@inject(\"store\")\n@observer\nclass App extends Component<IProps> {\n  @observable showBackside: boolean = false;\n  @observable putInStack: boolean = false;\n  @observable isOver: boolean = false;\n  @observable dealAmount: string = \"8\";\n\n  componentDidMount() {\n    const playerId = this.getPlayerId();\n    this.props.store!.init(\"test\", playerId);\n  }\n\n  getPlayerId() {\n    const urlParts = window.location.href.split(\"?\");\n\n    if (urlParts.length < 2) {\n      return \"\";\n    }\n\n    const param = urlParts[1].split(\"=\");\n\n    if (param[0] === \"playerId\") {\n      return param[1];\n    }\n\n    return \"\";\n  }\n\n  changeDealAmount = (event: any, input: InputOnChangeData) => {\n    this.dealAmount = input.value;\n  };\n\n  render() {\n    const { store } = this.props;\n\n    if (!store || store.cards.length === 0) {\n      return null;\n    }\n\n    return (\n      <DndProvider backend={Backend}>\n        <Header>Mulle!</Header>\n        {store!.playerId === \"player1\" && (\n          <>\n            <PileOfCards\n              piled={true}\n              cardIds={store.getCardsForPile(\"main\")}\n              backsideUp={true}\n            />\n            <Button\n              onClick={() =>\n                store.dealCardsToAllPlayers(Number(this.dealAmount))\n              }\n            >\n              Fordel kort\n            </Button>\n            <Input value={this.dealAmount} onChange={this.changeDealAmount} />\n          </>\n        )}\n        <Grid columns={3} divided={true}>\n          <Grid.Row>\n            <Grid.Column>\n              <Player playerId={\"player1\"} />\n            </Grid.Column>\n            <Grid.Column>\n              <Grid columns={5}>\n                {store.cardPiles\n                  .filter(pile => pile.pileType === PileType.PLAY_AREA)\n                  .map(pile => (\n                    <Grid.Column>\n                      <PlayArea\n                        position={pile.position}\n                        piled={true}\n                        backsideUp={false}\n                      />\n                    </Grid.Column>\n                  ))}\n              </Grid>\n            </Grid.Column>\n            <Grid.Column>\n              <Player playerId={\"player2\"} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </DndProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react'; \nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PlayMaker from './logic/store';\n\nconst PlayMakerStore = new PlayMaker();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={PlayMakerStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}